{"version":3,"sources":["components/Form.js","components/SingleListItem.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","value","inputValue","onChange","e","handleInput","target","onClick","handleData","SingleListItem","time","src","weatherDesc","Math","round","temperature","humidity","windSpeed","toFixed","pressure","Weather","useState","daysInterval","setDaysInterval","selectedDay","setSelectedDay","useEffect","console","log","weatherInfo","getDaysInterval","list","dt_txt","slice","obj","eachDayOfInterval","start","Date","end","length","map","singleDate","format","title","filter","single","weather","icon","main","temp","wind","speed","App","formValue","setFormValue","weatherData","setWeatherData","error","setError","getPromiseData","cityName","a","fetch","promise","ok","json","data","city","name","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb5b8da1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    \r\n    return (\r\n        <div className=\"form\">\r\n            <p>This is a basic weather application, enter your city in the form and take a look at your forecast.</p>\r\n            <input \r\n                value={props.inputValue} \r\n                onChange={(e) => props.handleInput(e.target.value)} \r\n            />\r\n            <button onClick={() => props.handleData()}>SEARCH</button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst SingleListItem = (props) => {\r\n    return (\r\n        <ul className=\"singleListItem\">\r\n            <li className=\"time\">{props.time}</li>\r\n            <li className=\"weatherImage\"><img src={`http://openweathermap.org/img/wn/${props.weatherDesc}@2x.png`} /></li>\r\n            <li className=\"temp\">{Math.round(props.temperature)} Â°C</li>\r\n            <li className=\"humidity\">{props.humidity} %</li>\r\n            <li className=\"wind\">{props.windSpeed.toFixed(1)} km/h</li>\r\n            <li className=\"pressure\">{props.pressure} mBar</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SingleListItem\r\n","import React, { useState, useEffect } from 'react'\r\nimport SingleListItem from './SingleListItem'\r\nimport { eachDayOfInterval, format } from 'date-fns'\r\n\r\nconst Weather = (props) => {\r\n\r\n    const [daysInterval, setDaysInterval] = useState();\r\n    const [selectedDay, setSelectedDay] = useState();\r\n\r\n    useEffect(() => {\r\n        console.log(props.weatherInfo);\r\n        setDaysInterval(getDaysInterval(props.weatherInfo))\r\n        setSelectedDay(props.weatherInfo.list[0].dt_txt.slice(0, 10));\r\n        \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    \r\n\r\n  \r\n\r\n\r\n    const getDaysInterval = (obj) => {\r\n        return eachDayOfInterval({\r\n            start: new Date(obj.list[0].dt_txt.slice(0, 10)),\r\n            end: new Date(obj.list[obj.list.length - 1].dt_txt.slice(0, 10)),\r\n        }).map(singleDate => format(singleDate, \"yyyy-MM-dd\"));\r\n    }\r\n\r\n    return (\r\n        <div className=\"weatherInfoContainer\">\r\n            {daysInterval &&\r\n                <div className=\"weatherInfo\">\r\n                    <h3>{props.title}</h3>\r\n                    <div className=\"daySelector\">\r\n                        <ul>\r\n                            {selectedDay === daysInterval[0] ?\r\n                                <li className=\"selected\" onClick={() => setSelectedDay(daysInterval[0])}>{daysInterval[0]}</li>\r\n                                :\r\n                                <li onClick={() => setSelectedDay(daysInterval[0])}>{daysInterval[0]}</li>\r\n                            }\r\n\r\n                            {selectedDay === daysInterval[1] ?\r\n                                <li className=\"selected\" onClick={() => setSelectedDay(daysInterval[1])}>{daysInterval[1]}</li>\r\n                                :\r\n                                <li onClick={() => setSelectedDay(daysInterval[1])}>{daysInterval[1]}</li>\r\n                            }\r\n\r\n                            {selectedDay === daysInterval[2] ?\r\n                                <li className=\"selected\" onClick={() => setSelectedDay(daysInterval[2])}>{daysInterval[2]}</li>\r\n                                :\r\n                                <li onClick={() => setSelectedDay(daysInterval[2])}>{daysInterval[2]}</li>\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"scrollableWrapper\">\r\n                        <div className=\"table\">\r\n                            \r\n                            <div className=\"tableHeadings\">\r\n                                <h5 className=\"time\">TIME</h5>\r\n                                <h5 className=\"weatherImage\">WX</h5>\r\n                                <h5 className=\"temp\">TEMP.</h5>\r\n                                <h5 className=\"humidity\">HUMIDITY</h5>\r\n                                <h5 className=\"wind\">WIND</h5>\r\n                                <h5 className=\"pressure\">PRESSURE</h5>\r\n                            </div>\r\n\r\n                            <div className=\"tableData\">\r\n                                {selectedDay === daysInterval[0] &&\r\n                                    props.weatherInfo.list\r\n                                        .filter(single => single.dt_txt.slice(0, 10) === daysInterval[0])\r\n                                        .map(single =>\r\n                                            <SingleListItem\r\n                                                time={single.dt_txt.slice(11, 16)}\r\n                                                weatherDesc={single.weather[0].icon}\r\n                                                temperature={single.main.temp}\r\n                                                humidity={single.main.humidity}\r\n                                                windSpeed={single.wind.speed}\r\n                                                pressure={single.main.pressure}\r\n                                            />)\r\n                                }\r\n\r\n                                {selectedDay === daysInterval[1] &&\r\n                                    props.weatherInfo.list\r\n                                        .filter(single => single.dt_txt.slice(0, 10) === daysInterval[1])\r\n                                        .map(single =>\r\n                                            <SingleListItem\r\n                                                time={single.dt_txt.slice(11, 16)}\r\n                                                weatherDesc={single.weather[0].icon}\r\n                                                temperature={single.main.temp}\r\n                                                humidity={single.main.humidity}\r\n                                                windSpeed={single.wind.speed}\r\n                                                pressure={single.main.pressure}\r\n                                            />)\r\n                                }\r\n\r\n                                {selectedDay === daysInterval[2] &&\r\n                                    props.weatherInfo.list\r\n                                        .filter(single => single.dt_txt.slice(0, 10) === daysInterval[2])\r\n                                        .map(single =>\r\n                                            <SingleListItem\r\n                                                time={single.dt_txt.slice(11, 16)}\r\n                                                weatherDesc={single.weather[0].icon}\r\n                                                temperature={single.main.temp}\r\n                                                humidity={single.main.humidity}\r\n                                                windSpeed={single.wind.speed}\r\n                                                pressure={single.main.pressure}\r\n                                            />)\r\n                                }\r\n\r\n                            </div> {/*tableData*/}\r\n                        </div> {/*table */}\r\n                    </div>{/*scrollableWrapper */}\r\n                </div>  /*weatherInfo */\r\n            }  \r\n        </div>/*weatherInfoContainer */\r\n    )\r\n}\r\nexport default Weather\r\n\r\n\r\n","import Form from './components/Form'\nimport Weather from './components/Weather'\nimport React, {useState} from 'react'\nimport './style/style.scss'\n\n\nfunction App() {\n  const [formValue, setFormValue] = useState(\"\");\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(false); \n\n\n  const getPromiseData = async (cityName) => {\n    const promise = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=fad0e1b9cda3c8b672a274f6df50aa5c`);\n\n    if (promise.ok === true) {\n      const data = await promise.json();\n      setWeatherData(data);\n      setError(false);\n        \n    } else {\n      setWeatherData(null);\n      setError(true);\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Magic weather</h1>\n      <Form\n        inputValue={formValue}\n        handleInput={setFormValue}\n        handleData={() => getPromiseData(formValue)}\n       />\n       \n       {weatherData &&\n          <Weather\n            title={weatherData.city.name}\n            weatherInfo={weatherData}\n          />\n       }\n\n       {error &&\n        <h4>Error! Please check that you have entered the data correctly, or try again later.</h4>\n       }\n       \n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}